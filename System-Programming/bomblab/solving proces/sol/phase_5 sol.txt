0x000000000040107c <phase_5+14>:        mov    $0x40248a,%esi
의 0x40248a ->"%d %d"
------------------------------------
0x0000000000401095 <phase_5+39>:        mov    0xc(%rsp),%eax
0x0000000000401099 <phase_5+43>:        and    $0xf,%eax
0x000000000040109c <phase_5+46>:        mov    %eax,0xc(%rsp)
0x00000000004010a0 <phase_5+50>:        cmp    $0xf,%eax
0x00000000004010a3 <phase_5+53>:        je     0x4010d2 <phase_5+100>
...
0x00000000004010d2 <phase_5+100>:       callq  0x4013ca <explode_bomb>

첫 번째 %d=0xc(%rsp)=%eax와 0xf=15를 &처리 한다.
-> 1의 자리만 mask
-> 1의 자리만 mask한 값과 처음 값을 비교했을 때 같으면 터진다.
-> 즉 첫 번째 %d는 0xf=15가 아님
------------------------------------
0x00000000004010a5 <phase_5+55>:        mov    $0x0,%ecx
0x00000000004010aa <phase_5+60>:        mov    $0x0,%edx
0x00000000004010af <phase_5+65>:        mov    $0x4023e0,%esi

%esi가 가리키는 0x4023e0은 한 배열의 첫 번째 값임.

0x4023e0 <array.3308>:  	   10
0x4023e4 <array.3308+4>:        2
0x4023e8 <array.3308+8>:        14
0x4023ec <array.3308+12>:       7
0x4023f0 <array.3308+16>:       8
0x4023f4 <array.3308+20>:       12
0x4023f8 <array.3308+24>:       15
0x4023fc <array.3308+28>:       11
0x402400 <array.3308+32>:       0
0x402404 <array.3308+36>:       4
0x402408 <array.3308+40>:       1
0x40240c <array.3308+44>:       13
0x402410 <array.3308+48>:       3
0x402414 <array.3308+52>:       9
0x402418 <array.3308+56>:       6
0x40241c <array.3308+60>:       5
------------------------------------
0x00000000004010b4 <phase_5+70>:        add    $0x1,%edx
0x00000000004010b7 <phase_5+73>:        cltq
0x00000000004010b9 <phase_5+75>:        mov    (%rsi,%rax,4),%eax
0x00000000004010bc <phase_5+78>:        add    %eax,%ecx
0x00000000004010be <phase_5+80>:        cmp    $0xf,%eax
0x00000000004010c1 <phase_5+83>:        jne    0x4010b4 <phase_5+70>

add    $0x1,%edx
-> %edx는 루프 카운터

mov    (%rsi,%rax,4),%eax
-> %rax에 %rsi+4%rax의 값을 넣는다.
-> %rax에 (첫 번째 배열의 포인터)+(size)*(index)
-> index=%rax 인 배열의 값을 %rax에 넣는다.

add    %eax,%ecx
-> %ecx에 그 값을 다 더한다. 
-> 첫 번째 mov 동작이 있은 후에 더하므로 첫 번째 배열 값은 저장되지 않는다.

cmp    $0xf,%eax
-> 그 값이 0xf=15면 종료한다.
------------------------------------
0x00000000004010c7 <phase_5+89>:        cmp    $0xf,%edx
0x00000000004010ca <phase_5+92>:        jne    0x4010d2 <phase_5+100>
...
0x00000000004010d2 <phase_5+100>:       callq  0x4013ca <explode_bomb>

루프 카운터 %edx랑 0xf=15랑 비교해서 다르면 터진다.
-> 루프가 15번 돌아야 한다.
------------------------------------
정리하면
첫 번째 %d: 15번 array를 재귀적으로 서치했을 때 , 그 값이 15가 나오면 통과.
0x00000000004010be <phase_5+80>:        cmp    $0xf,%eax(=값)
0x00000000004010c7 <phase_5+89>:        cmp    $0xf,%edx(=카운터)

첫 번째 %d를 5로 잡으면 15번째 서치 값이 15가 된다.
rdx=0 , 0x40241c <array.3308+60>:       	5
rdx=1 , 0x4023f4 <array.3308+20=4*5>:      12
rdx=2 , 0x402410 <array.3308+48=4*12>:     3
rdx=3 , 0x4023ec <array.3308+12=4*3>:      7
rdx=4 , 0x4023fc <array.3308+28=4*7>:      11
rdx=5 , 0x40240c <array.3308+44=4*11>:     13
rdx=6 , 0x402414 <array.3308+52=4*13>:     9
rdx=7 , 0x402404 <array.3308+36=4*9>:      4
rdx=8 , 0x4023f0 <array.3308+16=4*4>:      8
rdx=9 , 0x402400 <array.3308+32=4*8>:      0
rdx=10, 0x4023e0 <array.3308+0=4*0>: 	10
rdx=11, 0x402408 <array.3308+40=4*10>:     1
rdx=12, 0x4023e4 <array.3308+4=4*1>:       2
rdx=13, 0x4023e8 <array.3308+8=4*2>:       14
rdx=14, 0x402418 <array.3308+56=4*14>:     6
rdx=15, 0x4023f8 <array.3308+24=4*6>:      15
------------------------------------
두 번째 %d: array 안의 모든 값을 더하되, 첫 번째 array는 들어가지 않음.
0x00000000004010cc <phase_5+94>:        cmp    0x8(%rsp),%ecx
%ecx =1+2+3+...+15-(첫 번째 %d)= 15(15+1)/2 -5(array.3308+60) = 115
------------------------------------
답: 5 115

